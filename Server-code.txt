Server:-

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

import java.net.ServerSocket;

import java.util.concurrent.Executors;

import java.io.IOException;

import java.util.Scanner;

public class CalculatorServer {

    public static void main(String[] args) {

        try {
            System.out.println("Waiting for clients operation:");
            ServerSocket ss = new ServerSocket(9806);

            while (true) {
                Socket ssoc = ss.accept();
                System.out.println("Connection Established:");

                BufferedReader in = new BufferedReader(new InputStreamReader(ssoc.getInputStream()));
                PrintWriter out = new PrintWriter(ssoc.getOutputStream(), true);

                out.println("Answer: " + evaluateExpression(in.readLine()));
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    static double evaluateExpression(String expression) {
        try {
            String[] parts = expression.split(" ");
            double num1 = Double.parseDouble(parts[0]);
            double num2 = Double.parseDouble(parts[2]);
            String operator = parts[1];

            switch (operator) {
                case "+":
                    return num1 + num2;
                case "-":
                    return num1 - num2;
                case "*":
                    return num1 * num2;
                case "/":
                    if (num2 != 0) {
                        return num1 / num2;
                    } else {
                        throw new ArithmeticException("Division by 0");
                    }
                case "%":
                    return num1 % num2;
                case "sqrt":
                    return Math.sqrt(num1);
                default:
                    throw new IllegalArgumentException("Invalid operator: " + operator);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return Double.NaN;
        }
    }
}